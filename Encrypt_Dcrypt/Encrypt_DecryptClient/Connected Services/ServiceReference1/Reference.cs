//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Encrypt_DecryptClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextDetails", Namespace="http://schemas.datacontract.org/2004/07/Encrypt_DecryptWCFService")]
    [System.SerializableAttribute()]
    public partial class TextDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DecryptedtextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EncryptedtextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaintextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Decryptedtext {
            get {
                return this.DecryptedtextField;
            }
            set {
                if ((object.ReferenceEquals(this.DecryptedtextField, value) != true)) {
                    this.DecryptedtextField = value;
                    this.RaisePropertyChanged("Decryptedtext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Encryptedtext {
            get {
                return this.EncryptedtextField;
            }
            set {
                if ((object.ReferenceEquals(this.EncryptedtextField, value) != true)) {
                    this.EncryptedtextField = value;
                    this.RaisePropertyChanged("Encryptedtext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Plaintext {
            get {
                return this.PlaintextField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaintextField, value) != true)) {
                    this.PlaintextField = value;
                    this.RaisePropertyChanged("Plaintext");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Encrypt_DecryptWCFService")]
    [System.SerializableAttribute()]
    public partial class MyException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Encrypt_DecryptWCFService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IEncrypt_DecryptService1")]
    public interface IEncrypt_DecryptService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/Encryption", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/EncryptionResponse")]
        string Encryption(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/Encryption", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/EncryptionResponse")]
        System.Threading.Tasks.Task<string> EncryptionAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/Decryption", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/DecryptionResponse")]
        string Decryption(string cipherText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/Decryption", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/DecryptionResponse")]
        System.Threading.Tasks.Task<string> DecryptionAsync(string cipherText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/AddData", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/AddDataResponse")]
        bool AddData(Encrypt_DecryptClient.ServiceReference1.TextDetails td);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/AddData", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/AddDataResponse")]
        System.Threading.Tasks.Task<bool> AddDataAsync(Encrypt_DecryptClient.ServiceReference1.TextDetails td);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/DeleteTextDetail", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/DeleteTextDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Encrypt_DecryptClient.ServiceReference1.MyException), Action="http://tempuri.org/IEncrypt_DecryptService1/DeleteTextDetailMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Encrypt_DecryptWCFService")]
        bool DeleteTextDetail(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/DeleteTextDetail", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/DeleteTextDetailResponse")]
        System.Threading.Tasks.Task<bool> DeleteTextDetailAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/GetData", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/GetDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Encrypt_DecryptClient.ServiceReference1.MyException), Action="http://tempuri.org/IEncrypt_DecryptService1/GetDataMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Encrypt_DecryptWCFService")]
        Encrypt_DecryptClient.ServiceReference1.TextDetails GetData(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/GetData", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/GetDataResponse")]
        System.Threading.Tasks.Task<Encrypt_DecryptClient.ServiceReference1.TextDetails> GetDataAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/UpdateTextDetail", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/UpdateTextDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Encrypt_DecryptClient.ServiceReference1.MyException), Action="http://tempuri.org/IEncrypt_DecryptService1/UpdateTextDetailMyExceptionFault", Name="MyException", Namespace="http://schemas.datacontract.org/2004/07/Encrypt_DecryptWCFService")]
        Encrypt_DecryptClient.ServiceReference1.TextDetails UpdateTextDetail(Encrypt_DecryptClient.ServiceReference1.TextDetails td);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/UpdateTextDetail", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/UpdateTextDetailResponse")]
        System.Threading.Tasks.Task<Encrypt_DecryptClient.ServiceReference1.TextDetails> UpdateTextDetailAsync(Encrypt_DecryptClient.ServiceReference1.TextDetails td);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/ShowAllData", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/ShowAllDataResponse")]
        System.Data.DataSet ShowAllData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/ShowAllData", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/ShowAllDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ShowAllDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/GetDataUsingDataContractResponse")]
        Encrypt_DecryptClient.ServiceReference1.CompositeType GetDataUsingDataContract(Encrypt_DecryptClient.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEncrypt_DecryptService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IEncrypt_DecryptService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Encrypt_DecryptClient.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Encrypt_DecryptClient.ServiceReference1.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEncrypt_DecryptService1Channel : Encrypt_DecryptClient.ServiceReference1.IEncrypt_DecryptService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Encrypt_DecryptService1Client : System.ServiceModel.ClientBase<Encrypt_DecryptClient.ServiceReference1.IEncrypt_DecryptService1>, Encrypt_DecryptClient.ServiceReference1.IEncrypt_DecryptService1 {
        
        public Encrypt_DecryptService1Client() {
        }
        
        public Encrypt_DecryptService1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Encrypt_DecryptService1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Encrypt_DecryptService1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Encrypt_DecryptService1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Encryption(string str) {
            return base.Channel.Encryption(str);
        }
        
        public System.Threading.Tasks.Task<string> EncryptionAsync(string str) {
            return base.Channel.EncryptionAsync(str);
        }
        
        public string Decryption(string cipherText) {
            return base.Channel.Decryption(cipherText);
        }
        
        public System.Threading.Tasks.Task<string> DecryptionAsync(string cipherText) {
            return base.Channel.DecryptionAsync(cipherText);
        }
        
        public bool AddData(Encrypt_DecryptClient.ServiceReference1.TextDetails td) {
            return base.Channel.AddData(td);
        }
        
        public System.Threading.Tasks.Task<bool> AddDataAsync(Encrypt_DecryptClient.ServiceReference1.TextDetails td) {
            return base.Channel.AddDataAsync(td);
        }
        
        public bool DeleteTextDetail(int id) {
            return base.Channel.DeleteTextDetail(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTextDetailAsync(int id) {
            return base.Channel.DeleteTextDetailAsync(id);
        }
        
        public Encrypt_DecryptClient.ServiceReference1.TextDetails GetData(int id) {
            return base.Channel.GetData(id);
        }
        
        public System.Threading.Tasks.Task<Encrypt_DecryptClient.ServiceReference1.TextDetails> GetDataAsync(int id) {
            return base.Channel.GetDataAsync(id);
        }
        
        public Encrypt_DecryptClient.ServiceReference1.TextDetails UpdateTextDetail(Encrypt_DecryptClient.ServiceReference1.TextDetails td) {
            return base.Channel.UpdateTextDetail(td);
        }
        
        public System.Threading.Tasks.Task<Encrypt_DecryptClient.ServiceReference1.TextDetails> UpdateTextDetailAsync(Encrypt_DecryptClient.ServiceReference1.TextDetails td) {
            return base.Channel.UpdateTextDetailAsync(td);
        }
        
        public System.Data.DataSet ShowAllData() {
            return base.Channel.ShowAllData();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ShowAllDataAsync() {
            return base.Channel.ShowAllDataAsync();
        }
        
        public Encrypt_DecryptClient.ServiceReference1.CompositeType GetDataUsingDataContract(Encrypt_DecryptClient.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Encrypt_DecryptClient.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Encrypt_DecryptClient.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
